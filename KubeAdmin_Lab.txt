Creating a Kubernetes Cluster
In this lab, we will install and configure a Kubernetes cluster consisting of 1 master and 2 nodes.

Lab requested Task:
================
Create 3 VMs 
each VM contain 30G disk, 3G RAM, 1 CPU, install Rocky8 Linux OS or CentOS8 with Server Mode only.
After Setup enable EPEL and PowerTools repository then update ur OS
HINT;;;;>> Install 1 VM Then enable EPEL and PowerTools repo then Shutdown VM and make Clone from this VM.
Or Use Ubuntu-server without GUI
=========
Then Set up the environment of Kubernetes cluster Using kubeAdmin
One Node Act as control plane (master) and others join to the cluster as workers. 
========
Plz Document all steps
=====================================================

-------- 1- Preparing Environment -----------------------
- Downlaoding Centos-8 Stream ISO
  - Url: http://centos.interhost.net.il/8-stream/isos/x86_64/CentOS-Stream-8-x86_64-latest-boot.iso

- Add New VmWare Machine with requested Requirments 
- Installing Centos 8 Stream and Restart.
- login and update Centos OS
  - dnf -y upgrade
- Powered off VMWare Machine.
----------------------------------------------------------------------------
----------- 2- Clone 1 VM for MasterVM and apply common configuration on it.
----------------------------------------------------------------------------
- elevate privilages
  sudo su

- Disable SELinux enforcement.
	setenforce 0
        sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux


- Enable the br_netfilter module for cluster communication:
  modprobe br_netfilter
  echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables


- Ensure that the Docker dependencies are satisfied
  yum install -y yum-utils device-mapper-persistent-data lvm2

-Add the Docker repo and install Docker:
 
 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
 yum install -y docker-ce

-Set the cgroup driver for Docker to systemd, reload systemd, then enable and start Docker:
 sed -i '/^ExecStart/ s/$/ --exec-opt native.cgroupdriver=systemd/' /usr/lib/systemd/system/docker.service
 systemctl daemon-reload
 systemctl enable docker --now

-Add the Kubernetes repo
 cat << EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
  https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF


- Install Kubernetes
  yum install -y kubelet-1.14.0-0 kubeadm-1.14.0-0 kubectl-1.14.0-0 kubernetes-cni-0.7.5

-Enable the kubelet service
 systemctl enable kubelet

- add IP's of Master and workers in /etc/hosts file
  sudo vim  /etc/hosts
  192.168.2.* k8sMaster
  192.168.2.* k8sNode1
  192.168.2.* k8sNode2
	replace last * with IP of Master or Worker.

- Open ports used by Kubernetes
  sudo firewall-cmd --zone=public --permanent --add-port={8080,6443,10250,30000-32767}/tcp

- Reload firewall
  firewall-cmd --reload

- check swapp if disabled
  sudo swapoff -a

- install iproute 
  dnf install -y iproute-tc

-----------------------------------------------------------------------------------------------------------
- 3- Now clone 2 VMs for Node1 and Node2
- 4- then continue the following confguration on Master Node VM Only. and before power-on Master VM add CPU to 2CPU rather than 1cpu
-----------------------------------------------------------------------------------------------------------

- Initialize the cluster using the IP range for Flannel
  kubeadm init --pod-network-cidr=192.168.0.0/16

- Copy the kubeadmn join command that is in the output

  kubeadm join 192.168.2.14:6443 --token uheban.i02fz6t6rj9ld33f \
    --discovery-token-ca-cert-hash sha256:586c89a64e3f523426231cef3f3f02ad0ec5d72be07a482ad2b96d2a0306e162


- Exit sudo, copy the admin.conf to your home directory, and take ownership

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


- Deploy Flannel to manage network connections

kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel-old.yaml

- Check the cluster state
 kubectl get pods --all-namespaces

---------------------------------------------------------------------
-5- Configuring Kubernetes on the Worker node only-------------------
---------------------------------------------------------------------

- Run the join command that you copied earlier
  Note: Don't Use the below join token as it gereted from my machine one time, make sure that you copied you token gereated from your kubernetes master.

  kubeadm join 192.168.2.14:6443 --token uheban.i02fz6t6rj9ld33f \
    --discovery-token-ca-cert-hash sha256:586c89a64e3f523426231cef3f3f02ad0ec5d72be07a482ad2b96d2a0306e162

- Then go to K8sMaster and Then we'll check the nodes from the master.
  kubectl get nodes

---------------------------------------------------------------------
-5-  Create and Scale a Deployment Using kubectl -------------------
---------------------------------------------------------------------
- Create a simple deployment:
  kubectl create deployment httpd --image=httpd

- Inspect the pod
  kubectl get pods

- Scale the deployment:
  kubectl scale deployment httpd --replicas=2

- Inspect the pods. We should have four now
  kubectl get pods




  


